/**
 * @fileoverview Firestore Security Rules for Apex Case Battles.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, balancing open read access for certain collections with strict ownership and role-based access control for sensitive data.
 *
 * Data Structure:
 * - User-specific data is stored under `/users/{userId}`, ensuring private data remains siloed.
 * - Publicly accessible data, like `/cases` and `/items`, is open for reading.
 * - The `/settings/global` document stores global settings.
 * - `/battles/{battleId}` stores case battle events.
 *
 * Key Security Decisions:
 * - Users can only create, update, and delete their own user documents.
 * - Public data (cases, items) is readable by everyone but only modifiable by authorized personnel (not implemented in this prototype).
 * - The settings document is read-only for clients.
 * - User listing is generally disallowed to protect privacy.
 * - The rules do not enforce strict data validation in this prototype phase.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own user data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own document at /users/user_abc if request.auth.uid == 'user_abc'.
     * @allow (update) - User with UID 'user_abc' can update their own document at /users/user_abc.
     * @allow (delete) - User with UID 'user_abc' can delete their own document at /users/user_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create a document at /users/user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is disallowed for privacy.
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read case data, but restricts writes.
     * @path /cases/{caseId}
     * @allow (get, list) - Any user, signed in or not, can read case data.
     * @deny (create, update, delete) - No user can create, update, or delete case data without specific authorization (not implemented).
     * @principle Public read access with restricted writes.
     */
    match /cases/{caseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows management of NFT inventory.
     * @path /nft_inventory/{nftId}
     * @allow (get, list) - Any user, signed in or not, can read NFT inventory data.
     * @deny (create, update, delete) - No user can create, update, or delete NFT inventory data without specific authorization (not implemented).
     * @principle Public read access with restricted writes.
     */
    match /nft_inventory/{nftId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows users to manage their own inventory.
     * @path /users/{userId}/inventory/{inventoryId}
     * @allow (create) - User with UID 'user_abc' can create an inventory item at /users/user_abc/inventory/item_123 if request.auth.uid == 'user_abc'.
     * @allow (update) - User with UID 'user_abc' can update their own inventory item.
     * @allow (delete) - User with UID 'user_abc' can delete their own inventory item.
     * @deny (create) - User with UID 'user_xyz' cannot create an inventory item at /users/user_abc/inventory/item_123.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/inventory/{inventoryId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(userId) && resource != null && resource.data.userId == request.resource.data.userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read item data, but restricts writes.
     * @path /items/{itemId}
     * @allow (get, list) - Any user, signed in or not, can read item data.
     * @deny (create, update, delete) - No user can create, update, or delete item data without specific authorization (not implemented).
     * @principle Public read access with restricted writes.
     */
    match /items/{itemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts access to transaction data.
     * @path /transactions/{transactionId}
     * @deny (get, list, create, update, delete) - No user can access transaction data without specific authorization (not implemented).
     * @principle Restricts access to sensitive data.
     */
    match /transactions/{transactionId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read global settings, but restricts writes.
     * @path /settings/global
     * @allow (get) - Any user, signed in or not, can read global settings.
     * @deny (list, create, update, delete) - No user can list, create, update, or delete global settings without specific authorization.
     * @principle Public read access with restricted writes.
     */
    match /settings/global {
      allow get: if true;
      allow list, create, update, delete: if false;
    }

    /**
     * @description Restricts access to withdrawal queue.
     * @path /withdrawal_queue/{requestId}
     * @deny (get, list, create, update, delete) - No user can access the withdrawal queue without specific authorization (not implemented).
     * @principle Restricts access to sensitive data.
     */
    match /withdrawal_queue/{requestId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Logs all upgrade attempts for analytics and history.
     * @path /upgrades/{upgradeId}
     * @deny (get, list, create, update, delete) - No user can create, update, or delete upgrade attempts data without specific authorization (not implemented).
     */
    match /upgrades/{upgradeId} {
        allow get, list, create, update, delete: if false;
    }

    /**
     * @description Stores information about each case battle event.
     * @path /battles/{battleId}
     * @allow (get, list) - Any user can read battle information
     * @deny (create, update, delete) - No user can create, update or delete battle information.
     */
    match /battles/{battleId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }
  }
}