/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a user-ownership model for user-specific data and public read access for certain collections like 'cases' and 'items'.
 *   It prioritizes security by default, explicitly denying access where not specifically granted.
 * @data_structure
 *   - /users/{userId}: Stores individual user profiles.
 *   - /cases/{caseId}: Stores information about cases.
 *   - /nft_inventory/{nftId}: Manages the bot's NFT inventory.
 *   - /users/{userId}/inventory/{inventoryId}: Tracks user-specific inventory.
 *   - /items/{itemId}: Contains the definitions for items.
 *   - /transactions/{transactionId}: Logs all transactions.
 *   - /settings/global: Stores global settings.
 *   - /withdrawal_queue/{requestId}: Manages NFT withdrawal requests.
 *   - /upgrades/{upgradeId}: Logs item upgrade attempts.
 *   - /battles/{battleId}: Stores case battle information.
 * @key_security_decisions
 *   - Users can only read/write their own user document.
 *   - Public read access is granted to 'cases' and 'items'.
 *   - Listing of user documents is disallowed.
 *   - The 'settings' document is read-only.
 *   - All write operations require authentication.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user documents.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own document.
     * @allow (get, update, delete) Signed-in user can only access their own document.
     * @deny (list) Listing all users is not allowed.
     * @deny (create) Cannot create a user with an ID that does not match auth.uid
     * @principle Enforces document ownership; users can only manage their own data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to case documents.
     * @path /cases/{caseId}
     * @allow (get, list) Anyone can read case details.
     * @deny (create, update, delete) Only admins can modify case data.
     * @principle Provides public information about available cases.
     */
    match /cases/{caseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to NFT inventory documents.
     * @path /nft_inventory/{nftId}
     * @allow (get) Anyone can read NFT inventory details.
     * @deny (create, update, delete, list) Only admins can modify NFT inventory data.
     * @principle  Manages the bot's NFT inventory, restricting write access.
     */
    match /nft_inventory/{nftId} {
      allow get: if true;
      allow list, create, update, delete: if false;
    }

    /**
     * @description Controls access to user-specific inventory.
     * @path /users/{userId}/inventory/{inventoryId}
     * @allow (create, get, list, update, delete) Signed-in user can manage their own inventory.
     * @deny (create) Cannot create inventory with userId that does not match auth.uid
     * @principle Enforces user ownership of inventory items.
     */
    match /users/{userId}/inventory/{inventoryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to item documents.
     * @path /items/{itemId}
     * @allow (get, list) Anyone can read item details.
     * @deny (create, update, delete) Only admins can modify item data.
     * @principle Provides public information about available items.
     */
    match /items/{itemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to transaction documents.
     * @path /transactions/{transactionId}
     * @allow (create) Any signed-in user can create transaction.
     * TODO: add condition what user id from transaction is equal to auth id.
     */
    match /transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

    /**
     * @description Controls access to the global settings document.
     * @path /settings/global
     * @allow (get) Anyone can read the settings.
     * @deny (create, update, delete, list) No one can modify the settings.
     * @principle Restricts modification of global settings.
     */
    match /settings/global {
      allow get: if true;
      allow list, create, update, delete: if false;
    }

    /**
     * @description Controls access to the withdrawal queue.
     * @path /withdrawal_queue/{requestId}
     * @deny (get, create, update, delete, list) Only trusted services can manage the queue.
     * @principle Restricts access to the withdrawal queue for security.
     */
    match /withdrawal_queue/{requestId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Controls access to upgrade documents.
     * @path /upgrades/{upgradeId}
     *  @allow (create) Any signed-in user can create upgrade event.
     */
    match /upgrades/{upgradeId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

    /**
     * @description Controls access to case battle documents.
     * @path /battles/{battleId}
     * @allow (get, list) All signed in users can see the list of case battles.
     */
    match /battles/{battleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }
  }
}