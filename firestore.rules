/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model, where users can only access their own data, with some exceptions for public read collections.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user themselves.
 * - /cases/{caseId}: Publicly readable case definitions.
 * - /nft_inventory/{nftId}: Inventory of NFTs owned by the bot (not user-accessible).
 * - /users/{userId}/inventory/{inventoryId}: User-specific inventory items, accessible only by the user.
 * - /items/{itemId}: Publicly readable item definitions.
 * - /transactions/{transactionId}: Transaction history, only writeable by the server.
 * - /settings/global: Global settings (read-only for clients).
 * - /withdrawal_queue/{requestId}: Withdrawal requests (server-managed).
 * - /upgrades/{upgradeId}: Upgrade event logs.
 * - /battles/{battleId}: Case battle data.
 *
 * Key Security Decisions:
 * - Users can only create their own user document with a matching UID.
 * - Users can only manage their own inventory items.
 * - Public read access is granted to /cases/ and /items/.
 * - Listing of users is disallowed.
 * - Transactions and WithdrawalQueue are intended for server-side management only.
 *
 * Denormalization for Authorization:
 * - The inventory collection requires the `userId` to match the parent `userId` to ensure user ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user document.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own user document with matching userId.
     * @allow (get, update, delete) - Authenticated user reads/updates/deletes their own user document with matching userId.
     * @deny (create) - Authenticated user attempts to create a user document with a mismatched userId.
     * @deny (get, update, delete) - Authenticated user attempts to read/update/delete another user's document.
     * @principle Enforces document ownership for all operations on the user document.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Allows anyone to read case documents.
     * @path /cases/{caseId}
     * @allow (get, list) - Any user can read the case document.
     * @deny (create, update, delete) - No one can create, update, or delete case documents.
     * @principle Grants public read access while restricting write access.
     */
    match /cases/{caseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts access to NFT inventory documents.
     * @path /nft_inventory/{nftId}
     * @deny (get, list, create, update, delete) - No one can access NFT inventory directly.
     * @principle Restricts access to a server-managed collection.
     */
    match /nft_inventory/{nftId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Allows users to manage their own inventory items.
     * @path /users/{userId}/inventory/{inventoryId}
     * @allow (create) - Authenticated user creates an inventory item under their user ID.
     * @allow (get, list, update, delete) - Authenticated user reads/updates/deletes their own inventory items.
     * @deny (create) - Authenticated user attempts to create an inventory item under another user's ID.
     * @deny (get, list, update, delete) - Authenticated user attempts to read/update/delete another user's inventory items.
     * @principle Enforces document ownership for all operations on user's inventory.
     */
    match /users/{userId}/inventory/{inventoryId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Allows anyone to read item documents.
     * @path /items/{itemId}
     * @allow (get, list) - Any user can read the item document.
     * @deny (create, update, delete) - No one can create, update, or delete item documents.
     * @principle Grants public read access while restricting write access.
     */
    match /items/{itemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts access to transaction documents.
     * @path /transactions/{transactionId}
     * @deny (get, list, create, update, delete) - No one can access transactions directly.
     * @principle Restricts access to a server-managed collection.
     */
    match /transactions/{transactionId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read the global settings document.
     * @path /settings/global
     * @allow (get) - Any user can read the settings document.
     * @deny (list, create, update, delete) - No one can list, create, update, or delete the settings document.
     * @principle Grants public read access while restricting write access.
     */
    match /settings/global {
      allow get: if true;
      allow list, create, update, delete: if false;
    }

    /**
     * @description Restricts access to withdrawal queue documents.
     * @path /withdrawal_queue/{requestId}
     * @deny (get, list, create, update, delete) - No one can access withdrawal queue directly.
     * @principle Restricts access to a server-managed collection.
     */
    match /withdrawal_queue/{requestId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Restricts access to upgrade documents.
     * @path /upgrades/{upgradeId}
     * @deny (get, list, create, update, delete) - No one can access upgrade documents directly.
     * @principle Restricts access to a server-managed collection.
     */
    match /upgrades/{upgradeId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Restricts access to case battle documents.
     * @path /battles/{battleId}
     * @deny (get, list, create, update, delete) - No one can access case battle documents directly.
     * @principle Restricts access to a server-managed collection.
     */
    match /battles/{battleId} {
      allow get, list, create, update, delete: if false;
    }
  }
}